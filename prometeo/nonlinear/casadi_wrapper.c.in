#include "casadi_wrapper_{{ fun.name }}.h"

void {{ fun.name }}_eval(const double* inputs, double* outputs,
    int (*{{ fun.name }})(const double**, double**, int*, double*, int)) {

    {{ arg_count = 0 }}
    {{ offset = 0 }}
    {% for arg in fun.args %}
    const double *in_{{ arg_count }} = inputs + {{ offset }};
    {{ arg_count = arg_count + 1 }}
    {{ offset = offset + arg.size[0]*arg.size[1] }}
    {% endfor %}

    {{ out_count = 0 }}
    {{ offset = 0 }}
    {% for out in fun.outs %}
    const double *out_{{ out_count }} = inputs + {{ offset }};
    {{ out_count = out_count + 1 }}
    {{ offset = offset + out.size[0]*out.size[1] }}
    {% endfor %}

    const double* casadi_arg[{{ length(fun.args) }}];
    double* casadi_res[{{ length(fun.outs) }}];

    {% for argnum in range(0, length(fun.args)) %}
    casadi_arg[{{ argnum }}] = in_{{ argnum }};
    {% endfor %}

    {% for outnum in range(0, length(fun.outs)) %}
    casadi_res[{{ outnum }}] = out_{{ outnum }};
    {% endfor %}

    int* iw = 0;
    double* w = 0;
    int mem = 0;

    {{ fun.name }}(casadi_arg, casadi_res, iw, w, mem);
}
